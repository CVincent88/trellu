{"version":3,"sources":["Header.js","tasks/TaskOptionMenu.js","images/ellipsis-v-solid.svg","images/grip-lines-solid.svg","tasks/Task.js","tasks/TaskForm.js","ColumnOptionMenu.js","Column.js","ListForm.js","ListCreator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Container","styled","div","props","taskId","menuToOpen","Button","button","TaskOptionMenu","task","columnId","validateTask","deleteElement","id","onClick","validated","isDragging","OptionIcon","img","Content","DragHandle","Task","index","toggleMenu","draggableId","provided","snapshot","draggableProps","ref","innerRef","aria-roledescription","dragHandleProps","alt","src","dragIcon","content","optionIcon","onTaskValidated","Form","form","Textarea","textarea","mouseDown","TaskForm","registerNewTask","useState","newTaskText","setNewTaskText","buttonPressed","setButtonPressed","toggleButtonLook","prevState","onSubmit","e","preventDefault","_submitTask","value","onChange","target","name","type","rows","placeholder","onMouseDown","onMouseUp","ColumnOptionMenu","Options","TaskList","isDraggingOver","Title","h3","InnerList","nextProps","tasks","this","map","React","Component","Column","column","title","droppableId","droppableProps","Input","input","ListForm","registerNewList","newListTitle","setnewListTitle","_submitNewList","ListCreator","taskMap","tasksIds","PureComponent","App","columns","columnOrder","data","setData","setMenuToOpen","isMenuOpen","setIsMenuOpen","menuId","newColumn","length","newColumnOrder","newState","newTaskContent","originColumnId","newTask","Object","keys","newTasksIds","console","log","newTasksList","newColumnsContent","indexOf","splice","newColumnList","onDragStart","start","announce","source","onDragUpdate","update","message","destination","onDragEnd","result","finish","Array","from","startTasksIds","newStart","finishTasksIds","newFinish","direction","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b83a812.chunk.js","sourcesContent":["import './Header.css'\n\nfunction Header() {\n  return(\n    <div className=\"container\">\n      <h1>Trellu</h1>\n    </div>\n  )\n}\n\nexport default Header","import styled from 'styled-components'\n\nconst Container = styled.div`\n  background-color: rgb(255, 255, 255);\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  right: -70px;\n  z-index: 999;\n  visibility: ${props => (props.taskId === props.menuToOpen ? 'visible' : 'hidden')};\n`;\n\nconst Button = styled.button`\n  background-color: #fff;\n  padding: 5px;\n  border: 0;\n  &:hover{\n    background-color: rgba(190, 190, 190, 0.438);\n  }\n`;\n\nfunction TaskOptionMenu({task, columnId, menuToOpen, validateTask, deleteElement}) {  \n\n  return(\n    <Container taskId={task.id} menuToOpen={menuToOpen}>\n      <Button onClick={() => validateTask(task.id)}>\n        {task.validated === false ? 'Valider' : 'Invalider'}\n      </Button>\n      <Button onClick={() => deleteElement('task', columnId, task.id)}>Supprimer</Button>\n    </Container>\n  )\n}\n\nexport default TaskOptionMenu","export default __webpack_public_path__ + \"static/media/ellipsis-v-solid.33b29c57.svg\";","export default __webpack_public_path__ + \"static/media/grip-lines-solid.c2781a6f.svg\";","import { Draggable } from 'react-beautiful-dnd'\nimport TaskOptionMenu from './TaskOptionMenu'\nimport optionIcon from '../images/ellipsis-v-solid.svg'\nimport dragIcon from '../images/grip-lines-solid.svg'\nimport styled from 'styled-components'\n\n\nconst Container = styled.div`\n  background-color: \n    ${props => (\n      props.task.validated \n        ? '#aaaaaa'\n        : props.isDragging \n          ? 'lightgreen' \n          : '#ffffff'\n       \n    )};\n  border: 1px solid rgba(0, 0, 0, 0.15);\n  width: 100%;\n  margin-bottom: 10px;\n  padding: 10px 0;\n  border-radius: 10px 10px;\n  text-align: justify;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: relative;\n`;\n\nconst OptionIcon = styled.img`\n  padding: 4px;\n  border-radius: 5px 5px;\n  cursor: pointer;\n  &:hover{\n    background-color: rgba(170, 170, 170, 0.562);\n  }\n`;\n\nconst Content = styled.div`\n  display: flex;\n  align-items: center;\n  text-decoration: ${props => (props.task.validated ? 'line-through' : 'none')};\n  margin: 0 10px\n`;\n\nconst DragHandle = styled.img`\n  margin-right: 8px\n`;\n\nfunction Task({index, task, deleteElement, columnId, toggleMenu, validateTask, menuToOpen}) {\n\n  return(\n    <Draggable\n      draggableId={task.id}\n      index={index}\n    >\n      {(provided, snapshot) => (\n        <Container \n          {...provided.draggableProps}\n          ref={provided.innerRef}\n          isDragging={snapshot.isDragging}\n          aria-roledescription=\"Press space bar to lift the task\"\n          task={task}\n        > \n          <Content validated={task.validated} task={task}>\n            <DragHandle {...provided.dragHandleProps} alt=\"Drag handle\" src={dragIcon}/>\n            {task.content}\n          </Content>\n          <OptionIcon onClick={() => toggleMenu(task.id)} alt=\"Logo menu\" src={optionIcon} />\n          <TaskOptionMenu \n            onTaskValidated={validateTask}\n            columnId={columnId} \n            task={task}\n            menuToOpen={menuToOpen} \n            deleteElement={deleteElement}\n            validateTask={validateTask}\n          />\n        </Container>\n      )}\n    </Draggable>\n  )\n}\n\nexport default Task","import { useState } from 'react'\nimport styled from 'styled-components'\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 10px 0;\n  width: 100%\n`;\n\nconst Textarea = styled.textarea`\n  border-radius: 10px 10px;\n  padding: 10px;\n  border: 0;\n  outline: none;\n  resize: none;\n  font-family: 'Arial';\n  margin-bottom: 5px;\n  width: 100%\n`;\n\nconst Button = styled.button`\n  width: 100%;\n  border-radius: 10px 10px;\n  border: 0;\n  padding: 5px;\n  background-color: rgb(0, 140, 255);\n  color: #fff;\n  font-size: 18px;\n  font-weight: 700;\n  box-shadow: ${props => props.mouseDown ? 'inset 1px 1px  3px rgba(0, 0, 0, .5)' : ''}\n`;\n\nfunction TaskForm({registerNewTask, columnId}) {\n\n  const [newTaskText, setNewTaskText] = useState('')\n  const [buttonPressed, setButtonPressed] = useState(false)\n\n  const _submitTask = (e, newTaskText, columnId) => {\n    e.preventDefault()\n\n    if(newTaskText !== ''){\n      registerNewTask(newTaskText, columnId)\n\n      setNewTaskText( newTaskText = '')\n    }\n  }\n\n  const toggleButtonLook = () => {\n    if(buttonPressed === false){\n      setButtonPressed(prevState => !prevState)\n    }else{\n      setButtonPressed(prevState => !prevState)\n    }\n  }\n\n  return(\n    <Form className='form' onSubmit={(e) => _submitTask(e, newTaskText, columnId)}>\n      <Textarea \n        value={newTaskText}\n        onChange={(e) => setNewTaskText(e.target.value)}  \n        name=\"New task\"\n        type=\"text\"\n        rows={2}\n        placeholder=\"Nouvelle tâche\"\n      />\n      <Button \n        className=\"validateButton\"\n        mouseDown={buttonPressed}\n        onMouseDown={() => toggleButtonLook()}\n        onMouseUp={() => toggleButtonLook()}\n      >\n        Ajouter\n      </Button>\n    </Form>\n  )\n}\n\nexport default TaskForm","import styled from 'styled-components'\n\nconst Container = styled.div`\n  background-color: rgb(255, 255, 255);\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  right: -70px;\n  z-index: 999;\n  visibility: ${props => (props.columnId === props.menuToOpen ? 'visible' : 'hidden')};\n`;\n\nconst Button = styled.button`\n  background-color: #fff;\n  padding: 5px;\n  border: 0;\n  &:hover{\n    background-color: rgba(190, 190, 190, 0.438);\n  }\n`;\n\nfunction ColumnOptionMenu({columnId, menuToOpen, deleteElement}) {  \n\n  return(\n    <Container columnId={columnId} menuToOpen={menuToOpen}>\n      <Button onClick={() => deleteElement('column', columnId, '')} >Supprimer</Button>\n    </Container>\n  )\n}\n\nexport default ColumnOptionMenu","import React from 'react'\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\nimport Task from './tasks/Task'\nimport TaskForm from './tasks/TaskForm'\nimport styled from 'styled-components'\nimport optionIcon from './images/ellipsis-v-solid.svg'\nimport ColumnOptionMenu from './ColumnOptionMenu' \n\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  justify-content: space-between;\n  position: relative;\n  width: 100%\n`;\n\nconst Options = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst Container = styled.div`\n  background-color: rgba(255, 255, 255, 0.623);\n  border-radius: 10px 10px;\n  margin: 10px;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  max-height: 90vh;\n  width: 20vw;\n`;\n\nconst OptionIcon = styled.img`\n  padding: 4px;\n  border-radius: 5px 5px;\n  cursor: pointer;\n  &:hover{\n    background-color: rgba(170, 170, 170, 0.562);\n  }\n`;\n\nconst TaskList = styled.div`\n  background-color: ${props => (props.isDraggingOver ? '#00000026' : 'transparent')};\n  transition: background-color .3s;\n  width: 100%;\n  border-radius: 10px 10px;\n  min-height: 10px;\n`;\n\nconst Title = styled.h3`\n  padding: 8px;\n`;\n\n// Class created for performance. It allows us to render a task only if it is the one dragged.\nclass InnerList extends React.Component {\n\n  shouldComponentUpdate(nextProps){\n    if(nextProps.tasks === this.props.tasks){\n      return false\n    }\n\n    return true\n  }\n\n  render() {\n    const { \n      tasks, \n      deleteElement, \n      columnId, \n      validateTask, \n      menuToOpen,\n      toggleMenu\n    } = this.props\n\n    return(\n      tasks.map((task, index) =>\n        <Task \n          key={task.id} \n          task={task} \n          index={index} \n          deleteElement={deleteElement} \n          columnId={columnId}\n          validateTask={validateTask}\n          menuToOpen={menuToOpen}\n          toggleMenu={toggleMenu}\n        />\n      )\n    )\n  }\n}\n\nfunction Column({column, tasks, index, registerNewTask, deleteElement, toggleMenu, validateTask, menuToOpen}) {\n  return(\n    <Draggable \n      draggableId={column.id}\n      index={index}\n    >\n      {(provided) => (\n        <Container          \n          {...provided.draggableProps}\n          ref={provided.innerRef}\n        >\n          <Header {...provided.dragHandleProps}>\n            <Title>{column.title}</Title>\n            <Options>\n              <OptionIcon onClick={() => toggleMenu(column.id)} alt=\"Logo menu\" src={optionIcon} />\n              <ColumnOptionMenu \n                columnId={column.id}\n                menuToOpen={menuToOpen} \n                deleteElement={deleteElement}\n              />\n            </Options>\n          </Header>\n          <TaskForm registerNewTask={registerNewTask} columnId={column.id}/>\n          <Droppable droppableId={column.id} type=\"task\">\n            {(provided, snapshot) => (\n              <TaskList \n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                isDraggingOver={snapshot.isDraggingOver}\n              >\n                <InnerList \n                  tasks={tasks} \n                  deleteElement={deleteElement} \n                  columnId={column.id}\n                  validateTask={validateTask}\n                  menuToOpen={menuToOpen}\n                  toggleMenu={toggleMenu}\n                />\n                {provided.placeholder}\n              </TaskList>\n            )}\n          </Droppable>\n        </Container>\n      )}\n    </Draggable>\n  )\n}\n\nexport default Column","import { useState } from 'react'\nimport styled from 'styled-components'\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  border-radius: 10px 10px;\n  padding: 10px;\n  border: 0;\n  outline: none;\n  resize: none;\n  font-family: 'Arial';\n  margin: 5px 0;\n`;\n\nconst Button = styled.button`\n  width: 100%;\n  border-radius: 10px 10px;\n  border: 0;\n  padding: 5px;\n  background-color: rgb(0, 140, 255);\n  color: #fff;\n  font-size: 18px;\n  font-weight: 700;\n  box-shadow: ${props => props.mouseDown ? 'inset 1px 1px  3px rgba(0, 0, 0, .5)' : ''}\n`;\n\nfunction ListForm({registerNewList}) {\n\n  const [newListTitle, setnewListTitle] = useState('')\n  const [buttonPressed, setButtonPressed] = useState(false)\n\n  const _submitNewList = (e, newListTitle) => {\n    e.preventDefault()\n\n    if(newListTitle !== ''){\n      registerNewList(newListTitle)\n      setnewListTitle( newListTitle = '')\n    }\n  }\n\n  const toggleButtonLook = () => {\n    if(buttonPressed === false){\n      setButtonPressed(prevState => !prevState)\n    }else{\n      setButtonPressed(prevState => !prevState)\n    }\n  }\n\n  return(\n    <Form onSubmit={(e) => _submitNewList(e, newListTitle)}>\n      <Input \n        value={newListTitle}\n        onChange={(e) => setnewListTitle(e.target.value)}  \n        name=\"NewList\"\n        type=\"text\"\n        placeholder=\"Titre de la liste\"\n      />\n      <Button \n        className=\"validateButton\"\n        mouseDown={buttonPressed}\n        onMouseDown={() => toggleButtonLook()}\n        onMouseUp={() => toggleButtonLook()}\n      >\n        Ajouter une liste\n      </Button>\n    </Form>\n  )\n}\n\nexport default ListForm","import ListForm from './ListForm'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  background-color: rgba(255, 255, 255, 0.623);\n  width: 17vw;\n  margin: 10px;\n  padding: 10px;\n  border-radius: 10px 10px;\n`;\n\nfunction ListCreator({registerNewList}) {\n  return(\n    <Container>\n      <ListForm registerNewList={registerNewList}/>\n    </Container>\n  )\n}\n\nexport default ListCreator","import './App.css';\nimport React, { useState } from 'react'\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\n// import initialData from './initial-data'\nimport Header from './Header'\nimport Column from './Column'\nimport ListCreator from './ListCreator'\n\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  display: flex;\n  align-items: flex-start;\n`;\n\nclass InnerList extends React.PureComponent {\n  render() {\n      const { \n        column, \n        taskMap, \n        index, \n        registerNewTask, \n        deleteElement, \n        validateTask, \n        menuToOpen,\n        toggleMenu\n      } = this.props\n      const tasks = column.tasksIds.map(taskId => taskMap[taskId])\n      return (\n        <Column \n          column={column} \n          tasks={tasks} \n          index={index} \n          registerNewTask={registerNewTask} \n          deleteElement={deleteElement}\n          validateTask={validateTask}\n          menuToOpen={menuToOpen}\n          toggleMenu={toggleMenu}\n        />\n      )\n  }\n}\n\nfunction App() {\n\n  const initialData = {\n    tasks: {\n\n    },\n    columns: {\n      \n    },\n    columnOrder: []\n  };\n  const [data, setData] = useState(initialData);\n  const [menuToOpen, setMenuToOpen] = useState('');\n  const [isMenuOpen, setIsMenuOpen] = useState(false); \n  \n\n  const toggleMenu = (menuId) => {\n    if(isMenuOpen === false){\n      setMenuToOpen(menuId)\n      setIsMenuOpen(prevState => prevState = !prevState)\n    }else{\n      setMenuToOpen('')\n      setIsMenuOpen(prevState => prevState = !prevState)\n    }    \n  }\n\n  const registerNewList = (title) => {\n    const {columns, columnOrder} = data\n\n    const newColumn = {\n      id: `column-${columnOrder.length + 1}`,\n      title: title,\n      tasksIds: []\n    }\n\n    const newColumnOrder = [\n      ...columnOrder,\n      newColumn.id\n    ]\n\n    const newState = {\n      ...data,\n      columns: {\n        ...columns,\n        [newColumn.id]: {\n          ...newColumn\n        }\n      },\n      columnOrder: newColumnOrder\n    }\n\n    setData(prevState => {\n      return {...prevState, ...newState}\n    })\n\n  }\n\n  const registerNewTask = (newTaskContent, originColumnId) => {\n\n    const {tasks, columns} = data\n\n    const newTask = {\n      id: `task-${Object.keys(tasks).length + 1}`,\n      content: newTaskContent,\n      validated: false\n    }\n\n    const newTasksIds = [\n      ...columns[originColumnId].tasksIds,\n      newTask.id\n    ]\n\n    const newState = {\n      ...data,\n      tasks: {\n        ...tasks,\n        [newTask.id]: {\n          ...newTask\n        }\n      },\n      columns: {\n        ...columns,\n        [originColumnId]: {\n          ...columns[originColumnId],\n          tasksIds: newTasksIds\n        }\n      }\n    }\n\n    setData(prevState => {\n      return {...prevState, ...newState}\n    })\n\n  }\n\n  const validateTask = (taskId) => {\n    console.log(data.tasks[taskId]);\n    if(data.tasks[taskId].validated === false){\n      const newTask = {\n        ...data.tasks[taskId],\n        validated: true\n      }\n      const newState = {\n        ...data,\n        tasks: {\n          ...data.tasks,\n          [newTask.id]: {\n            ...newTask\n          }\n        }\n      }\n\n      setData(prevState => {\n        return {...prevState, ...newState}\n      })\n\n    }else{\n      const newTask = {\n        ...data.tasks[taskId],\n        validated: false\n      }\n      const newState = {\n        ...data,\n        tasks: {\n          ...data.tasks,\n          [newTask.id]: {\n            ...newTask\n          }\n        }\n      }\n\n      setData(prevState => {\n        return {...prevState, ...newState}\n      })\n    }\n\n    toggleMenu(taskId)\n  }\n\n  const deleteElement = (type, columnId, taskId) => {\n    if(type === 'task'){\n      const newTasksList = data.tasks\n      delete newTasksList[taskId]\n\n      const newColumnsContent = data.columns\n      const index = newColumnsContent[columnId].tasksIds.indexOf(taskId)\n      newColumnsContent[columnId].tasksIds.splice(index, 1)\n\n      const newState = {\n        ...data,\n        tasks: {\n          ...newTasksList\n        },\n        columns: {\n          ...newColumnsContent\n        }\n      }\n\n      // We close the menu here, otherwise it will be opened on the next task created.\n      toggleMenu(taskId)\n\n      setData(prevState => {\n        return {...prevState, ...newState}\n      })\n\n    }else if(type === 'column'){\n      const newColumnList = data.columns;\n      delete newColumnList[columnId]\n\n      const newColumnOrder = data.columnOrder\n      delete newColumnOrder[columnId]\n\n      const newState = {\n        ...data,\n        columns: {\n          newColumnList\n        },\n        newColumnOrder\n      }\n\n      setData(prevState => {\n        return {...prevState, ...newState}\n      })\n    }\n  }\n\n  const onDragStart = (start, provided) => {\n    provided.announce(`You have lifted the task in position ${start.source.index + 1}`)\n  }\n\n  const onDragUpdate = (update, provided) => {\n    const message = update.destination\n    ? `You have moved the task to position ${update.destination.index + 1}`\n    : 'You are currently not over a droppable area';\n\n    provided.announce(message)\n  }\n\n  const onDragEnd = (result, provided) => {\n    const { destination, source, draggableId, type } = result\n\n    const message = result.destination\n    ? `You have moved the task from position\n      ${result.source.index + 1} to ${result.destination.index + 1}`\n    : `The task has been return to its position of ${result.source.index + 1}`;\n\n    provided.announce(message)\n\n    if(!destination) {\n      return\n    }\n\n    // If the user dropped the item back at the same spot\n    if(destination.droppableId === source.droppableId &&\n       destination.index === source.index\n    ){\n      return\n    }\n\n    // User changes column order\n    if(type === 'column'){\n      const newColumnOrder = Array.from(data.columnOrder)\n      newColumnOrder.splice(source.index, 1)\n      newColumnOrder.splice(destination.index, 0, draggableId)\n\n      const newState = {\n        ...data,\n        columnOrder: newColumnOrder\n      }\n\n      setData(prevState => {\n        return {...prevState, ...newState}\n      })\n      return\n    }\n\n    // User changes task order\n    const start = data.columns[source.droppableId];\n    const finish = data.columns[destination.droppableId];\n    const newTasksIds = Array.from(start.tasksIds);\n\n    // Moving a task within one list\n    if(start === finish) {\n      newTasksIds.splice(source.index, 1);\n      newTasksIds.splice(destination.index, 0, draggableId);\n\n      const newColumn = {\n        ...start,\n        tasksIds: newTasksIds\n      }\n\n      const newState = {\n        ...data,\n        columns: {\n          ...data.columns,\n          [newColumn.id]: newColumn\n        }\n      }\n\n      setData(prevState => {\n        return {...prevState, ...newState}\n      })\n      return\n    }else{\n      // Moving a task in another list\n      const startTasksIds = Array.from(start.tasksIds)\n      startTasksIds.splice(source.index, 1)\n      const newStart = {\n        ...start,\n        tasksIds: startTasksIds\n      };\n\n      const finishTasksIds = Array.from(finish.tasksIds)\n      finishTasksIds.splice(destination.index, 0, draggableId)\n      const newFinish = {\n        ...finish,\n        tasksIds: finishTasksIds\n      };\n\n      const newState = {\n        ...data,\n        columns: {\n          ...data.columns,\n          [newStart.id]: newStart,\n          [newFinish.id]: newFinish\n        }\n      }\n\n      setData(prevState => {\n        return {...prevState, ...newState}\n      })\n      \n      return\n    }\n\n  }\n\n  return(\n    <div className=\"App\">\n      <Header />\n      <DragDropContext \n        onDragStart={(start, provided) => onDragStart(start, provided)}\n        onDragUpdate={(update, provided) => onDragUpdate(update, provided)}\n        onDragEnd={(result, provided) => onDragEnd(result, provided)}\n      >\n        <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\n          {(provided) => (\n            <Container\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n            >\n              {data.columnOrder.map((columnId, index) => {\n                const column = data.columns[columnId]\n                \n                return (\n                  <InnerList \n                    key={column.id} \n                    column={column} \n                    taskMap={data.tasks} \n                    index={index}\n                    registerNewTask={registerNewTask}\n                    deleteElement={deleteElement}\n                    validateTask={validateTask}\n                    menuToOpen={menuToOpen}\n                    toggleMenu={toggleMenu}\n                  />\n                )\n              })}\n              {provided.placeholder}\n              <ListCreator registerNewList={registerNewList} />\n            </Container>\n          )}\n          \n        </Droppable>\n        \n      </DragDropContext>\n      \n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}